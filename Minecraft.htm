<!DOCTYPE html>
<html>
<head>
    <title>xiaoyumi游戏|Minecraft网页版</title>
    <script>
    function isMobileDevice() {
       return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
   }
   </script>
   <div id="mobile-message">
       <div>
           <h1>请使用电脑浏览器访问</h1>
           <p>此游戏需要键盘和鼠标操作，不支持移动设备。</p>
           <p>请使用桌面版Chrome、Firefox或Edge浏览器访问。</p>
       </div>
   </div>
   <script>
   if (isMobileDevice()) {
       // 显示移动设备提示，隐藏游戏内容
       document.getElementById('mobile-message').style.display = 'flex';
       document.getElementById('gameCanvas').style.display = 'none';
       document.getElementById('info').style.display = 'none';
       document.getElementById('controls').style.display = 'none';
   } else {
       // 正常加载游戏
       // ...原有的游戏代码...
   }
   </script>
   <style>
   #mobile-message {
       display: none;
       position: fixed;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       background-color: rgba(0,0,0,0.9);
       color: white;
       justify-content: center;
       align-items: center;
       text-align: center;
       padding: 20px;
       box-sizing: border-box;
       z-index: 100;
   }
   </style>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #87CEEB;
            font-family: Arial, sans-serif;
        }
        canvas {
            display: block;
        }
        #info {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.5);
            color: white;
            padding: 10px;
            border-radius: 5px;
        }
        #controls {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background: rgba(0,0,0,0.5);
            color: white;
            padding: 10px;
            border-radius: 5px;
        }
    </style>
    </head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="info">
        <div>简易Minecraft</div>
        <div id="position">位置: (0, 0, 0)</div>
        <div id="block">选中方块: 草地</div>
    </div>
    <div id="controls">
        <div>WASD: 移动</div>
        <div>空格: 跳跃</div>
        <div>Shift: 下降</div>
        <div>鼠标左键: 破坏方块</div>
        <div>鼠标右键: 放置方块</div>
        <div>1-6: 选择方块类型</div>
    </div>

    <script>
        // 游戏常量
        const BLOCK_SIZE = 32;
        const PLAYER_HEIGHT = 1.8;
        const GRAVITY = 0.05;
        const JUMP_FORCE = 0.8;
        const MOVE_SPEED = 0.1;
        
        // 游戏变量
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const positionInfo = document.getElementById('position');
        const blockInfo = document.getElementById('block');
        
        // 设置画布大小
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        // 玩家状态
        const player = {
            x: 0,
            y: 1,  // 修改为1，确保站在地面上
            z: 0,
            velocityY: 0,
            isOnGround: false,
            selectedBlock: 1,
            rotationX: 0,
            rotationY: 0
        };
        
        // 方块类型
        const blocks = {
            1: { name: '草地', color: '#7CFC00' },
            2: { name: '泥土', color: '#8B4513' },
            3: { name: '石头', color: '#808080' },
            4: { name: '木头', color: '#8B4513' },
            5: { name: '树叶', color: '#228B22' },
            6: { name: '水', color: '#1E90FF' }
        };
        
        // 世界数据
        const world = {};
        
        // 生成初始世界
        function generateWorld() {
            for (let x = -10; x <= 10; x++) {
                for (let z = -10; z <= 10; z++) {
                    // 地面层
                    setBlock(x, 0, z, 1);
                    
                    // 地下层
                    for (let y = -1; y >= -3; y--) {
                        setBlock(x, y, z, 2);
                    }
                    
                    // 基岩层
                    setBlock(x, -4, z, 3);
                    
                    // 随机生成一些树
                    if (Math.random() < 0.05 && x !== 0 && z !== 0) {
                        generateTree(x, 1, z);
                    }
                }
            }
            
            // 生成一些水
            for (let x = -3; x <= 3; x++) {
                for (let z = -3; z <= 3; z++) {
                    if (Math.sqrt(x*x + z*z) <= 3) {
                        setBlock(x, -1, z, 6);
                    }
                }
            }
        }
        
        // 生成一棵树
        function generateTree(x, y, z) {
            // 树干
            for (let i = 0; i < 4; i++) {
                setBlock(x, y + i, z, 4);
            }
            
            // 树叶
            for (let dx = -2; dx <= 2; dx++) {
                for (let dz = -2; dz <= 2; dz++) {
                    for (let dy = 2; dy <= 4; dy++) {
                        if (Math.abs(dx) + Math.abs(dz) + Math.abs(dy - 3) <= 3) {
                            setBlock(x + dx, y + dy, z + dz, 5);
                        }
                    }
                }
            }
        }
        // 设置方块
        function setBlock(x, y, z, type) {
            const key = `${x},${y},${z}`;
            if (type === 0) {
                delete world[key];
            } else {
                world[key] = type;
            }
        }
        
        // 获取方块
        function getBlock(x, y, z) {
            const key = `${x},${y},${z}`;
            return world[key] || 0;
        }
        
        // 检查碰撞
        function checkCollision(x, y, z) {
            const playerMinX = x - 0.3;
            const playerMaxX = x + 0.3;
            const playerMinY = y;
            const playerMaxY = y + PLAYER_HEIGHT;
            const playerMinZ = z - 0.3;
            const playerMaxZ = z + 0.3;
            
            for (let bx = Math.floor(playerMinX); bx <= Math.floor(playerMaxX); bx++) {
                for (let by = Math.floor(playerMinY); by <= Math.floor(playerMaxY); by++) {
                    for (let bz = Math.floor(playerMinZ); bz <= Math.floor(playerMaxZ); bz++) {
                        if (getBlock(bx, by, bz) > 0) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // 射线检测
        function raycast(fromX, fromY, fromZ, dirX, dirY, dirZ, maxDistance) {
            let x = fromX;
            let y = fromY;
            let z = fromZ;
            
            for (let i = 0; i < maxDistance * 10; i++) {
                x += dirX * 0.1;
                y += dirY * 0.1;
                z += dirZ * 0.1;
                
                const blockX = Math.floor(x);
                const blockY = Math.floor(y);
                const blockZ = Math.floor(z);
                
                if (getBlock(blockX, blockY, blockZ) > 0) {
                    return {
                        x: blockX,
                        y: blockY,
                        z: blockZ,
                        face: getHitFace(x, y, z, blockX, blockY, blockZ)
                    };
                }
            }
            return null;
        }
        
        // 获取击中面
        function getHitFace(hitX, hitY, hitZ, blockX, blockY, blockZ) {
            const dx = hitX - blockX - 0.5;
            const dy = hitY - blockY - 0.5;
            const dz = hitZ - blockZ - 0.5;
            
            const absX = Math.abs(dx);
            const absY = Math.abs(dy);
            const absZ = Math.abs(dz);
            
            if (absX > absY && absX > absZ) {
                return dx > 0 ? 'right' : 'left';
            } else if (absZ > absY && absZ > absX) {
                return dz > 0 ? 'front' : 'back';
            } else {
                return dy > 0 ? 'top' : 'bottom';
            }
        }
        
        // 键盘控制
        const keys = {};
        document.addEventListener('keydown', (e) => keys[e.key] = true);
        document.addEventListener('keyup', (e) => keys[e.key] = false);
        
        // 鼠标控制
        canvas.addEventListener('mousedown', (e) => {
            e.preventDefault();
            
            const dirX = Math.sin(player.rotationY);
            const dirY = -Math.tan(player.rotationX);
            const dirZ = -Math.cos(player.rotationY);
            
            const hit = raycast(
                player.x, player.y + PLAYER_HEIGHT / 2, player.z,
                dirX, dirY, dirZ, 10
            );
            
            if (hit) {
                if (e.button === 0) {
                    setBlock(hit.x, hit.y, hit.z, 0);
                } else if (e.button === 2) {
                    let placeX = hit.x;
                    let placeY = hit.y;
                    let placeZ = hit.z;
                    
                    switch (hit.face) {
                        case 'right': placeX++; break;
                        case 'left': placeX--; break;
                        case 'top': placeY++; break;
                        case 'bottom': placeY--; break;
                        case 'front': placeZ++; break;
                        case 'back': placeZ--; break;
                    }
                    
                    if (!checkCollision(placeX + 0.5, placeY, placeZ + 0.5)) {
                        setBlock(placeX, placeY, placeZ, player.selectedBlock);
                    }
                }
            }
        });
        canvas.addEventListener('contextmenu', (e) => e.preventDefault());
        
        // 鼠标移动控制视角
        let isMouseLocked = false;
        
        canvas.addEventListener('click', () => {
            canvas.requestPointerLock = canvas.requestPointerLock || 
                                      canvas.mozRequestPointerLock || 
                                      canvas.webkitRequestPointerLock;
            canvas.requestPointerLock();
        });
        
        document.addEventListener('pointerlockchange', lockChangeAlert, false);
        document.addEventListener('mozpointerlockchange', lockChangeAlert, false);
        
        function lockChangeAlert() {
            if (document.pointerLockElement === canvas || 
                document.mozPointerLockElement === canvas) {
                isMouseLocked = true;
                document.addEventListener('mousemove', updatePosition, false);
            } else {
                isMouseLocked = false;
                document.removeEventListener('mousemove', updatePosition, false);
            }
        }
        
        function updatePosition(e) {
            if (!isMouseLocked) return;
            
            player.rotationY -= e.movementX * 0.002;
            player.rotationX -= e.movementY * 0.002;
            
            player.rotationX = Math.max(-Math.PI/2, Math.min(Math.PI/2, player.rotationX));
        }
        
        // 选择方块类型
        document.addEventListener('keydown', (e) => {
            const num = parseInt(e.key);
            if (num >= 1 && num <= 6) {
                player.selectedBlock = num;
                blockInfo.textContent = `选中方块: ${blocks[num].name}`;
            }
        });
        
        // 游戏循环
        function gameLoop() {
            update();
            render();
            requestAnimationFrame(gameLoop);
        }
        
        // 更新游戏状态
        function update() {
            let moveX = 0;
            let moveZ = 0;
            
            if (keys['w'] || keys['ArrowUp']) {
                moveX += Math.sin(player.rotationY) * MOVE_SPEED;
                moveZ += -Math.cos(player.rotationY) * MOVE_SPEED;
            }
            if (keys['s'] || keys['ArrowDown']) {
                moveX -= Math.sin(player.rotationY) * MOVE_SPEED;
                moveZ -= -Math.cos(player.rotationY) * MOVE_SPEED;
            }
            if (keys['a'] || keys['ArrowLeft']) {
                moveX += Math.sin(player.rotationY - Math.PI/2) * MOVE_SPEED;
                moveZ += -Math.cos(player.rotationY - Math.PI/2) * MOVE_SPEED;
            }
            if (keys['d'] || keys['ArrowRight']) {
                moveX += Math.sin(player.rotationY + Math.PI/2) * MOVE_SPEED;
                moveZ += -Math.cos(player.rotationY + Math.PI/2) * MOVE_SPEED;
            }
            
            if (!checkCollision(player.x + moveX, player.y, player.z)) {
                player.x += moveX;
            }
            
            if (!checkCollision(player.x, player.y, player.z + moveZ)) {
                player.z += moveZ;
            }
            
            player.velocityY -= GRAVITY;
            
            if ((keys[' '] || keys['Space']) && player.isOnGround) {
                player.velocityY = JUMP_FORCE;
                player.isOnGround = false;
            }
            
            if (keys['Shift'] || keys['Control']) {
                player.velocityY = -MOVE_SPEED * 2;
                player.isOnGround = false;
            }
            
            if (!checkCollision(player.x, player.y + player.velocityY, player.z)) {
                player.y += player.velocityY;
                player.isOnGround = false;
            } else {
                if (player.velocityY < 0) player.isOnGround = true;
                player.velocityY = 0;
            }
            
            positionInfo.textContent = `位置: (${player.x.toFixed(1)}, ${player.y.toFixed(1)}, ${player.z.toFixed(1)})`;
        }
        
        // 渲染游戏
        function render() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // 绘制天空和地面背景
            ctx.fillStyle = '#87CEEB';
            ctx.fillRect(0, 0, canvas.width, canvas.height / 2);
            ctx.fillStyle = '#7CFC00';
            ctx.fillRect(0, canvas.height / 2, canvas.width, canvas.height / 2);
            
            // 收集可见方块
            const visibleBlocks = [];
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const scale = 100;
            for (const key in world) {
                const [x, y, z] = key.split(',').map(Number);
                const relX = x - player.x;
                const relY = y - player.y;
                const relZ = z - player.z;
                
                const camX = relX * Math.cos(player.rotationY) - relZ * Math.sin(player.rotationY);
                const camZ = relX * Math.sin(player.rotationY) + relZ * Math.cos(player.rotationY);
                const camY = relY;
                
                if (camZ <= 0) continue;
                
                const screenX = centerX + (camX / camZ) * scale;
                const screenY = centerY - (camY / camZ) * scale;
                const size = (BLOCK_SIZE / camZ) * scale;
                
                if (screenX + size < 0 || screenX - size > canvas.width || 
                    screenY + size < 0 || screenY - size > canvas.height) continue;
                
                visibleBlocks.push({
                    screenX, screenY, size,
                    type: world[key],
                    distance: camZ
                });
            }
            
            // 按距离排序 (从远到近)
            visibleBlocks.sort((a, b) => b.distance - a.distance);
            
            // 绘制方块
            for (const block of visibleBlocks) {
                ctx.fillStyle = blocks[block.type].color;
                ctx.fillRect(
                    block.screenX - block.size / 2,
                    block.screenY - block.size / 2,
                    block.size,
                    block.size
                );
                
                ctx.strokeStyle = '#000';
                ctx.lineWidth = 1;
                ctx.strokeRect(
                    block.screenX - block.size / 2,
                    block.screenY - block.size / 2,
                    block.size,
                    block.size
                );
            }
            
            // 绘制准星
            ctx.fillStyle = '#FFF';
            ctx.fillRect(centerX - 5, centerY - 1, 10, 2);
            ctx.fillRect(centerX - 1, centerY - 5, 2, 10);
        }
        
        // 初始化游戏
        generateWorld();
        gameLoop();
        
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
    </script>
</body>
</html>