<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Êâ´Èõ∑Ê∏∏Êàè</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            touch-action: manipulation;
            user-select: none;
        }
        
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 10px;
            height: 100vh;
        }
        
        .game-header {
            width: 100%;
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            background-color: #333;
            color: white;
            padding: 10px;
            border-radius: 5px;
        }
        
        .difficulty-selector {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            width: 100%;
            justify-content: center;
        }
        
        .difficulty-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
        }
        
        .difficulty-btn.active {
            background-color: #2196F3;
            font-weight: bold;
        }
        
        .game-info {
            display: flex;
            gap: 15px;
        }
        
        .info-box {
            background-color: #222;
            padding: 5px 10px;
            border-radius: 5px;
            text-align: center;
            min-width: 80px;
        }
        
        .info-label {
            font-size: 12px;
            color: #aaa;
        }
        
        .info-value {
            font-size: 20px;
            font-weight: bold;
        }
        
        #mines-left {
            color: #f44336;
        }
        
        #timer {
            color: #4CAF50;
        }
        
        .game-container {
            width: 100%;
            max-width: 500px;
            aspect-ratio: 1/1;
            overflow: auto;
            background-color: #bbb;
            position: relative;
            border: 2px solid #333;
            border-radius: 5px;
            touch-action: none;
        }
        
        .game-board {
            display: grid;
            grid-template-columns: repeat(var(--cols), 1fr);
            grid-template-rows: repeat(var(--rows), 1fr);
            gap: 1px;
            width: 100%;
            height: 100%;
        }
        
        .cell {
            background-color: #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 16px;
            cursor: pointer;
            position: relative;
            aspect-ratio: 1/1;
        }
        
        .cell.revealed {
            background-color: #f5f5f5;
        }
        
        .cell.mine {
            background-color: #ffebee;
        }
        
        .cell.mine.revealed {
            background-color: #f44336;
        }
        
        .cell.flagged::after {
            content: "üö©";
            position: absolute;
            font-size: 18px;
        }
        
        .number-1 { color: #2196F3; }
        .number-2 { color: #4CAF50; }
        .number-3 { color: #f44336; }
        .number-4 { color: #673AB7; }
        .number-5 { color: #FF5722; }
        .number-6 { color: #009688; }
        .number-7 { color: #795548; }
        .number-8 { color: #607D8B; }
        
        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            display: none;
            z-index: 10;
        }
        
        .restart-btn {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
        }
        
        @media (max-width: 500px) {
            .cell {
                font-size: 14px;
            }
            
            .info-box {
                min-width: 70px;
            }
            
            .info-value {
                font-size: 18px;
            }
        }
    </style>
</head>
<body>
    <div class="game-header">
        <div class="game-info">
            <div class="info-box">
                <div class="info-label">Ââ©‰ΩôÈõ∑Êï∞</div>
                <div class="info-value" id="mines-left">10</div>
    </div>
            <div class="info-box">
                <div class="info-label">Êó∂Èó¥</div>
                <div class="info-value" id="timer">0</div>
            </div>
        </div>
    </div>
    
    <div class="difficulty-selector">
        <button class="difficulty-btn active" data-difficulty="easy">ÂàùÁ∫ß</button>
        <button class="difficulty-btn" data-difficulty="medium">‰∏≠Á∫ß</button>
        <button class="difficulty-btn" data-difficulty="hard">È´òÁ∫ß</button>
    </div>
    
    <div class="game-container">
        <div class="game-board" id="game-board"></div>
        <div class="game-over" id="game-over">
            <div id="game-result">Ê∏∏ÊàèÁªìÊùü</div>
            <button class="restart-btn" id="restart-btn">ÈáçÊñ∞ÂºÄÂßã</button>
        </div>
    </div>

    <script>
        // Ê∏∏ÊàèÈÖçÁΩÆ
        const difficulties = {
            easy: { rows: 9, cols: 9, mines: 10 },
            medium: { rows: 16, cols: 16, mines: 40 },
            hard: { rows: 16, cols: 30, mines: 99 }
        };
        
        // Ê∏∏ÊàèÁä∂ÊÄÅ
        let gameState = {
            board: [],
            mineCount: 0,
            flaggedCount: 0,
            revealedCount: 0,
            gameOver: false,
            firstClick: true,
            timer: 0,
            timerInterval: null,
            currentDifficulty: 'easy'
        };
        
        // DOMÂÖÉÁ¥†
        const gameBoard = document.getElementById('game-board');
        const minesLeftEl = document.getElementById('mines-left');
        const timerEl = document.getElementById('timer');
        const gameOverEl = document.getElementById('game-over');
        const gameResultEl = document.getElementById('game-result');
        const restartBtn = document.getElementById('restart-btn');
        const difficultyBtns = document.querySelectorAll('.difficulty-btn');
        
        // ÂàùÂßãÂåñÊ∏∏Êàè
        function initGame(difficulty = 'easy') {
            clearInterval(gameState.timerInterval);
            
            gameState = {
                board: [],
                mineCount: difficulties[difficulty].mines,
                flaggedCount: 0,
                revealedCount: 0,
                gameOver: false,
                firstClick: true,
                timer: 0,
                timerInterval: null,
                currentDifficulty: difficulty
            };
            
            // Êõ¥Êñ∞UI
            minesLeftEl.textContent = gameState.mineCount;
            timerEl.textContent = '0';
            gameOverEl.style.display = 'none';
            
            // ËÆæÁΩÆÊ∏∏ÊàèÊùøÂ§ßÂ∞è
            gameBoard.style.setProperty('--rows', difficulties[difficulty].rows);
            gameBoard.style.setProperty('--cols', difficulties[difficulty].cols);
            
            // ÂàõÂª∫Á©∫Êùø
            gameBoard.innerHTML = '';
            for (let r = 0; r < difficulties[difficulty].rows; r++) {
                gameState.board[r] = [];
                for (let c = 0; c < difficulties[difficulty].cols; c++) {
                    gameState.board[r][c] = {
                        isMine: false,
                        isRevealed: false,
                        isFlagged: false,
                        neighborMines: 0
                    };
                    
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    cell.dataset.row = r;
                    cell.dataset.col = c;
                    
                    // Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô®
                    cell.addEventListener('click', handleCellClick);
                    cell.addEventListener('contextmenu', handleCellRightClick);
                    
                    gameBoard.appendChild(cell);
                }
            }
            
            // ËÆæÁΩÆÈöæÂ∫¶ÊåâÈíÆÁä∂ÊÄÅ
            difficultyBtns.forEach(btn => {
                btn.classList.toggle('active', btn.dataset.difficulty === difficulty);
            });
        }
        
        // ÊîæÁΩÆÂú∞Èõ∑ÔºàÈ¶ñÊ¨°ÁÇπÂáªÂêéÔºâ
        function placeMines(firstRow, firstCol) {
            const { rows, cols, mines } = difficulties[gameState.currentDifficulty];
            let minesPlaced = 0;
            
            while (minesPlaced < mines) {
                const r = Math.floor(Math.random() * rows);
                const c = Math.floor(Math.random() * cols);
                
                // Á°Æ‰øùÈ¶ñÊ¨°ÁÇπÂáªÁöÑÊ†ºÂ≠êÂèäÂÖ∂Âë®Âõ¥‰∏çÊòØÂú∞Èõ∑
                const isFirstClickArea = Math.abs(r - firstRow) <= 1 && Math.abs(c - firstCol) <= 1;
                
                if (!gameState.board[r][c].isMine && !isFirstClickArea) {
                    gameState.board[r][c].isMine = true;
                    minesPlaced++;
                    
                    // Êõ¥Êñ∞Âë®Âõ¥Ê†ºÂ≠êÁöÑÊï∞Â≠ó
                    for (let dr = -1; dr <= 1; dr++) {
                        for (let dc = -1; dc <= 1; dc++) {
                            const nr = r + dr;
                            const nc = c + dc;
                            if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {
                                gameState.board[nr][nc].neighborMines++;
                            }
                        }
                    }
                }
            }
        }
        
        // Â§ÑÁêÜÊ†ºÂ≠êÁÇπÂáª
        function handleCellClick(e) {
            if (gameState.gameOver) return;
            
            const cell = e.currentTarget;
            const r = parseInt(cell.dataset.row);
            const c = parseInt(cell.dataset.col);
            const cellData = gameState.board[r][c];
            
            if (cellData.isFlagged || cellData.isRevealed) return;
            
            // È¶ñÊ¨°ÁÇπÂáªÊó∂ÊîæÁΩÆÂú∞Èõ∑Âπ∂ÂºÄÂßãËÆ°Êó∂
            if (gameState.firstClick) {
                placeMines(r, c);
                startTimer();
                gameState.firstClick = false;
            }
            
            if (cellData.isMine) {
                // Ë∏©Âà∞Âú∞Èõ∑
                revealAllMines();
                cellData.isRevealed = true;
                cell.classList.add('mine', 'revealed');
                endGame(false);
                return;
            }
            
            // Êè≠ÂºÄÊ†ºÂ≠ê
            revealCell(r, c);
            
            // Ê£ÄÊü•ÊòØÂê¶Ëé∑ËÉú
            checkWin();
        }
        
        // Â§ÑÁêÜÂè≥ÈîÆÊ†áËÆ∞
        function handleCellRightClick(e) {
            e.preventDefault();
            if (gameState.gameOver || gameState.firstClick) return;
            
            const cell = e.currentTarget;
            const r = parseInt(cell.dataset.row);
            const c = parseInt(cell.dataset.col);
            const cellData = gameState.board[r][c];
            
            if (cellData.isRevealed) return;
            
            // ÂàáÊç¢Ê†áËÆ∞Áä∂ÊÄÅ
            cellData.isFlagged = !cellData.isFlagged;
            
            if (cellData.isFlagged) {
                cell.classList.add('flagged');
                gameState.flaggedCount++;
            } else {
                cell.classList.remove('flagged');
                gameState.flaggedCount--;
            }
            
            // Êõ¥Êñ∞Ââ©‰ΩôÈõ∑Êï∞ÊòæÁ§∫
            minesLeftEl.textContent = gameState.mineCount - gameState.flaggedCount;
        }
        
        // Êè≠ÂºÄÊ†ºÂ≠ê
        function revealCell(r, c) {
            const { rows, cols } = difficulties[gameState.currentDifficulty];
            const cellData = gameState.board[r][c];
            
            if (cellData.isRevealed || cellData.isFlagged) return;
            
            cellData.isRevealed = true;
            gameState.revealedCount++;
            
            const cell = document.querySelector(`.cell[data-row="${r}"][data-col="${c}"]`);
            cell.classList.add('revealed');
            
            if (cellData.neighborMines > 0) {
                cell.textContent = cellData.neighborMines;
                cell.classList.add(`number-${cellData.neighborMines}`);
            } else {
                // Â¶ÇÊûúÊòØÁ©∫ÁôΩÊ†ºÂ≠êÔºåËá™Âä®Êè≠ÂºÄÂë®Âõ¥Ê†ºÂ≠ê
                for (let dr = -1; dr <= 1; dr++) {
                    for (let dc = -1; dc <= 1; dc++) {
                        const nr = r + dr;
                        const nc = c + dc;
                        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && !(dr === 0 && dc === 0)) {
                            revealCell(nr, nc);
                        }
                    }
                }
            }
        }
        
        // Êè≠ÂºÄÊâÄÊúâÂú∞Èõ∑
        function revealAllMines() {
            const { rows, cols } = difficulties[gameState.currentDifficulty];
            
            for (let r = 0; r < rows; r++) {
                for (let c = 0; c < cols; c++) {
                    if (gameState.board[r][c].isMine) {
                        const cell = document.querySelector(`.cell[data-row="${r}"][data-col="${c}"]`);
                        cell.classList.add('mine');
                        if (gameState.board[r][c].isFlagged) {
                            cell.classList.add('flagged');
                        }
                    }
                }
            }
        }
        
        // ÂºÄÂßãËÆ°Êó∂
        function startTimer() {
            gameState.timer = 0;
            timerEl.textContent = '0';
            
            gameState.timerInterval = setInterval(() => {
                gameState.timer++;
                timerEl.textContent = gameState.timer;
            }, 1000);
        }
        
        // Ê£ÄÊü•ÊòØÂê¶Ëé∑ËÉú
        function checkWin() {
            const { rows, cols, mines } = difficulties[gameState.currentDifficulty];
            const totalSafeCells = rows * cols - mines;
            
            if (gameState.revealedCount === totalSafeCells) {
                endGame(true);
            }
        }
        
        // ÁªìÊùüÊ∏∏Êàè
        function endGame(isWin) {
            gameState.gameOver = true;
            clearInterval(gameState.timerInterval);
            
            gameResultEl.textContent = isWin ? 'ÊÅ≠Âñú‰Ω†Ëµ¢‰∫ÜÔºÅ' : 'Ê∏∏ÊàèÁªìÊùüÔºÅ';
            gameOverEl.style.display = 'flex';
        }
        
        // ‰∫ã‰ª∂ÁõëÂê¨Âô®
        restartBtn.addEventListener('click', () => {
            initGame(gameState.currentDifficulty);
        });
        
        difficultyBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                initGame(btn.dataset.difficulty);
            });
        });
        
        // ÈòªÊ≠¢ÊâãÊú∫‰∏äÁöÑÈïøÊåâËèúÂçï
        document.addEventListener('contextmenu', e => {
            if (e.target.classList.contains('cell')) {
                e.preventDefault();
            }
        });
        
        // ÂàùÂßãÂåñÊ∏∏Êàè
        initGame();
    </script>
</body>
</html>